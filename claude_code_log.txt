# Claude Code 작업 로그

## 프로젝트: 지원사업 공고 수집 프로그램

### 1. 초기 요청 및 BTP 스크래퍼 구현
- **요청**: "https://www.btp.or.kr/kor/CMS/Board/Board.do?mCode=MN013 에 대해서 처리할 수 있는 프로그램을 만들어줘."
- **구현**: 부산테크노파크(BTP) 웹 스크래퍼 구현
  - 페이지네이션 기반 공고 목록 수집
  - 각 공고의 상세 페이지 접근
  - 공고 내용을 Markdown으로 변환하여 저장
  - 첨부파일 다운로드 기능

### 2. BTP 첨부파일 다운로드 문제 해결
- **문제**: "첨부파일은 하나도 다운로드 되어 있지 않아. 수정해줘."
- **해결**: URL 구성 수정
  - 상대 경로를 절대 경로로 변환
  - `/kor/` 경로 추가하여 올바른 다운로드 URL 생성

### 3. 파일명 가독성 개선
- **문제**: "파일 이름을 알아볼 수 없어. 공고 상세페이지에 있는 파일명처럼 읽을 수 있게 해줘."
- **해결**: URL 디코딩 및 문자 치환
  - `urllib.parse.unquote()` 사용하여 URL 인코딩된 파일명 디코딩
  - '+' 문자를 공백으로 치환

### 4. 다중 페이지 처리 확인
- **요청**: "현재 1페이지만 처리되는 데 4페이지까지 처리되도록 해줘."
- **확인**: 기본값이 이미 4페이지로 설정되어 있음

### 5. ITP 사이트 지원 추가
- **요청**: "https://itp.or.kr/intro.asp?tmid=13 도 마찬가지로 처리되도록 수정해줘."
- **구현**: 
  - 추상 기본 클래스 `BaseScraper` 생성
  - 인천테크노파크(ITP) 전용 스크래퍼 구현
  - 통합 실행 스크립트 `tp_scraper.py` 생성
- **문제**: JavaScript 기반 파일 다운로드로 인해 첨부파일 다운로드 실패

### 6. CCEI 사이트 지원 추가
- **요청**: "https://ccei.creativekorea.or.kr/chungbuk/custom/notice_list.do? 사이트도 추가해서 처리해줘."
- **구현**: 충북창조경제혁신센터(CCEI) 스크래퍼 구현
  - AJAX/JSON 기반 데이터 페칭
  - POST 요청으로 목록 및 상세 페이지 접근

### 7. CCEI 첨부파일 다운로드 수정
- **문제**: "ccei에 첨부파일 다운로드가 없네. 수정해줘."
- **해결**: HTML 구조 분석 및 파서 수정
  - dl/dt/dd 구조로 된 첨부파일 영역 파싱
  - 첨부파일 링크 추출 로직 개선

### 8. 전체 사이트 4페이지 수집
- **요청**: "전체 사이트에 대해 4페이지를 전부 수집해줘."
- **실행**: BTP, ITP, CCEI 각 4페이지씩 수집 완료

### 9. KIDP 사이트 지원 추가
- **요청**: "https://kidp.or.kr/?menuno=1202 사이트도 추가해줘."
- **구현**: 한국디자인진흥원(KIDP) 스크래퍼 구현
  - `mode=list` 파라미터 추가로 목록 페이지 접근
  - 상세 페이지 URL 패턴 분석 및 적용
  - 테이블 구조 파싱 개선

### 10. KIDP 첨부파일 다운로드 문제
- **문제**: "kidp의 첨부파일 다운로드가 구현되지 않았음. 수정해줘."
- **분석**: 
  - JavaScript `submitForm` 함수를 통한 파일 다운로드
  - 실제 파일 대신 HTML 페이지만 다운로드됨
  - 브라우저 자동화 도구(Playwright) 필요

## 최종 구현 상태

### 스크래퍼 구조
```
btp_scraper/
├── base_scraper.py      # 추상 기본 클래스
├── btp_scraper.py       # 부산테크노파크 스크래퍼
├── itp_scraper.py       # 인천테크노파크 스크래퍼
├── ccei_scraper.py      # 충북창조경제혁신센터 스크래퍼
├── kidp_scraper.py      # 한국디자인진흥원 스크래퍼
└── tp_scraper.py        # 통합 실행 스크립트
```

### 사용법
```bash
# 개별 사이트 수집
python tp_scraper.py --site btp    # 부산테크노파크
python tp_scraper.py --site itp    # 인천테크노파크
python tp_scraper.py --site ccei   # 충북창조경제혁신센터
python tp_scraper.py --site kidp   # 한국디자인진흥원

# 전체 사이트 수집
python tp_scraper.py --site all

# 페이지 수 지정
python tp_scraper.py --site btp --pages 2
```

### 각 사이트별 특징 및 상태

1. **BTP (부산테크노파크)**
   - ✅ 공고 수집 정상 작동
   - ✅ 첨부파일 다운로드 정상 작동
   - 특징: 표준적인 게시판 구조

2. **ITP (인천테크노파크)**
   - ✅ 공고 수집 정상 작동
   - ❌ 첨부파일 다운로드 실패 (JavaScript 보안)
   - 특징: JavaScript 함수를 통한 파일 다운로드

3. **CCEI (충북창조경제혁신센터)**
   - ✅ 공고 수집 정상 작동
   - ✅ 첨부파일 다운로드 정상 작동
   - 특징: AJAX/JSON 기반, 대부분 공고에 첨부파일 없음

4. **KIDP (한국디자인진흥원)**
   - ✅ 공고 수집 정상 작동
   - ❌ 첨부파일 다운로드 실패 (HTML만 다운로드됨)
   - 특징: JavaScript 기반 동적 페이지

### 주요 기술적 구현

1. **객체지향 설계**
   - 추상 기본 클래스를 통한 공통 기능 구현
   - 각 사이트별 특화 기능은 하위 클래스에서 구현

2. **다양한 웹 구조 대응**
   - 정적 HTML 파싱 (BeautifulSoup)
   - AJAX/JSON 데이터 처리
   - JavaScript 함수 파라미터 추출 (정규표현식)

3. **파일 처리**
   - URL 인코딩/디코딩
   - 파일명 정규화
   - 디렉토리 구조 관리

4. **에러 처리**
   - SSL 인증서 검증 처리
   - 타임아웃 처리
   - 예외 상황 로깅

### 향후 개선 사항

1. **JavaScript 기반 사이트 대응**
   - Playwright 또는 Selenium 통합
   - ITP, KIDP 첨부파일 다운로드 구현

2. **성능 최적화**
   - 비동기 처리 도입
   - 병렬 다운로드 구현

3. **기능 확장**
   - 중복 공고 체크
   - 증분 수집 (새로운 공고만 수집)
   - 데이터베이스 연동

## 2025년 6월 8일 작업 내용

### 11. CSV 파일 기반 스크래핑 자동화
- **요청**: "sitelist.csv 파일에 등록되어 있는 사이트에 대해서 공고문을 수집 후 저장하는 프로그램을 만들어줘."
- **구현**: `scrape_from_csv.py` 생성
  - CSV 파일에서 사이트 정보 읽기
  - 각 사이트에 대해 순차적으로 스크래핑 실행
  - 진행 상황 및 결과 출력

### 12. 추가 사이트 스크래퍼 구현
- **요청**: 다양한 사이트들에 대한 스크래퍼 추가 구현
- **구현된 사이트들**:
  - GSIF (강릉과학산업진흥원)
  - DJBEA (대전일자리경제진흥원)
  - MIRE (환동해산업연구원)
  - DCB (부산디자인진흥원)

### 13. 8개 사이트 파일 다운로드 기능 점검 및 수정
- **요청**: "현재 처리되는 8개 사이트에 대해 파일 다운로드 까지 제대로 작동하는지 확인하고 안되는 부분은 수정해줘."
- **분석 결과**:
  - BTP, ITP, KIDP: ✅ 정상 작동
  - GSIF, CCEI: ⚠️ 공고 본문만 저장, 파일 다운로드 안됨
  - DCB, DJBEA, MIRE: ❌ 공고 본문조차 못가져옴

### 14. GSIF 스크래퍼 수정
- **문제점**:
  - 상세 페이지 URL 경로 문제
  - 본문 추출 실패
  - 첨부파일 영역 파싱 실패
- **해결**:
  - URL에 `/gsipa/` 경로 추가
  - `img_td` 클래스를 가진 td에서 본문 추출
  - th 태그에 "파일" 텍스트가 있는 행에서 첨부파일 찾기

### 15. CCEI 스크래퍼 수정
- **문제점**:
  - 파일 정보가 상세 페이지 HTML에 없음
  - 파일 정보는 목록 API 응답의 FILE 필드에 UUID로 존재
- **해결**:
  - 리스트 데이터 캐시 구현
  - SEQ를 키로 사용하여 파일 UUID 저장
  - UUID 기반 다운로드 URL 생성
  - Content-Disposition 헤더에서 실제 파일명 추출
  - ISO-8859-1 → UTF-8 디코딩 처리

### 16. DCB 스크래퍼 수정
- **문제점**:
  - 미완성 구현 상태
  - 목록 및 상세 페이지 파싱 로직 부족
- **해결**:
  - 테이블 기반 목록 구조 파싱 구현
  - 다양한 파일 다운로드 패턴 추가
  - 본문 추출 로직 개선

### 17. DJBEA 스크래퍼 수정
- **문제점**:
  - SSL 인증서 오류
  - JavaScript 기반 네비게이션 (`doViewNew` 함수)
  - 목록 컨테이너 찾기 실패
- **해결**:
  - `verify_ssl = False` 설정
  - `doViewNew()` 함수 파라미터 파싱
  - 목록 컨테이너 패턴 확장 (`basic|generic`)

### 18. MIRE 스크래퍼 수정
- **문제점**:
  - 하드코딩된 세션 ID
  - EUC-KR 인코딩 문제
  - 특수한 테이블 구조
- **해결**:
  - 동적 세션 ID 획득 메소드 구현
  - `get_page` 메소드 오버라이드하여 EUC-KR 처리
  - `type=read` 링크 패턴으로 공고 찾기

### 19. 파일명 인코딩 문제 해결
- **MIRE 파일명 문제**:
  - **요청**: "저장된 파일명이 알아볼 수 없는 문자로 되어 있음"
  - **해결**: 
    - `download_file` 메소드 오버라이드
    - EUC-KR 인코딩된 파일명 처리
    - latin-1 → euc-kr 디코딩
  - **결과**: 한글 파일명 정상 표시

- **GSIF 파일명 문제**:
  - **요청**: "GSIF 사이트도 파일명이 이상하게 저장되는 에러 수정"
  - **해결**:
    - RFC 5987 형식 (`filename*=`) 처리 추가
    - EUC-KR 및 UTF-8 인코딩 모두 지원
  - **결과**: 모든 파일명 정상 표시

### 20. CLAUDE.md 파일 업데이트
- **요청**: "지금까지 수정한 부분에서 다음에 코딩할때 참고할 수 있는 인사이트가 있으면 잘 정리해서 CLAUDE.md 파일에 추가해줘."
- **추가 내용**:
  - 8개 사이트별 특징 업데이트
  - 인코딩 처리 방법 (페이지, 파일명, RFC 5987)
  - 파일 다운로드 패턴 4가지
  - AJAX/JSON API 처리 방법
  - 에러 처리 및 복원력
  - 성능 최적화 방안
  - 디버깅 팁

## 최종 구현 상태 (2025년 6월 8일)

### 전체 8개 사이트 상태
1. **BTP** (부산테크노파크)
   - ✅ 공고 수집 정상
   - ✅ 첨부파일 다운로드 정상
   - ✅ 파일명 한글 표시 정상

2. **ITP** (인천테크노파크)
   - ✅ 공고 수집 정상
   - ✅ 첨부파일 다운로드 정상
   - ✅ 파일명 한글 표시 정상

3. **KIDP** (한국디자인진흥원)
   - ✅ 공고 수집 정상
   - ✅ 첨부파일 다운로드 정상
   - ✅ 파일명 한글 표시 정상

4. **GSIF** (강릉과학산업진흥원)
   - ✅ 공고 수집 정상
   - ✅ 첨부파일 다운로드 정상
   - ✅ 파일명 한글 표시 정상 (EUC-KR/RFC 5987 처리)

5. **CCEI** (충북창조경제혁신센터)
   - ✅ 공고 수집 정상
   - ✅ 첨부파일 다운로드 정상 (UUID 기반)
   - ✅ 파일명 한글 표시 정상 (ISO-8859-1 → UTF-8)

6. **DCB** (부산디자인진흥원)
   - ✅ 공고 수집 정상
   - ✅ 첨부파일 다운로드 정상
   - ✅ 파일명 한글 표시 정상

7. **DJBEA** (대전일자리경제진흥원)
   - ✅ 공고 수집 정상 (SSL 인증서 문제 해결)
   - ✅ 첨부파일 다운로드 정상
   - ✅ 파일명 한글 표시 정상

8. **MIRE** (환동해산업연구원)
   - ✅ 공고 수집 정상 (동적 세션 ID)
   - ✅ 첨부파일 다운로드 정상
   - ✅ 파일명 한글 표시 정상 (EUC-KR 처리)

### 주요 기술적 해결 사항
1. **인코딩 문제 해결**
   - EUC-KR, UTF-8, ISO-8859-1 등 다양한 인코딩 처리
   - RFC 5987 표준 파일명 형식 지원
   - Content-Disposition 헤더 파싱 개선

2. **다양한 웹 구조 대응**
   - 정적 HTML (BeautifulSoup)
   - AJAX/JSON API (requests POST)
   - JavaScript 함수 파싱 (정규표현식)
   - 세션 기반 인증 (PHP 세션)

3. **파일 다운로드 패턴**
   - 직접 링크 방식
   - JavaScript 함수 호출 방식
   - UUID/ID 기반 방식
   - 세션 인증 방식

4. **에러 처리**
   - SSL 인증서 검증 비활성화
   - 동적 세션 관리
   - 다단계 인코딩 폴백
   - 메타데이터 보존

## 2025년 6월 8일 추가 작업 - 사이트별 특이사항 정리

### 21. JBF(전남바이오진흥원) 스크래퍼 구현
- **URL 구조 문제**:
  - 목록 페이지에서 상세 페이지 링크가 `/board.action`으로 시작
  - 실제로는 `/main/board.action`이어야 정상 접근 가능
  - 해결: URL 생성 시 `/main/` 경로 추가 로직 구현
- **테이블 구조**:
  - 표준적인 `<table class="basic_table">` 구조 사용
  - 제목 컬럼: `<td class="tl">` 클래스로 식별
- **본문 영역**:
  - `<div class="table_con">` 내에 본문 내용 포함
- **첨부파일**:
  - 테이블 내 `th` 태그에 "첨부파일" 텍스트가 있는 행에서 파일 정보 추출
  - 다운로드 URL: `/upload/download.jsp?cmsid=xxx&bidx=xxx&idx=xxx` 형식

### 22. CEPA(충남경제진흥원) 스크래퍼 구현
- **SSL 인증서 문제**:
  - HTTPS 사이트이지만 인증서 검증 실패
  - 해결: `verify_ssl = False` 설정으로 우회
- **테이블 구조**:
  - tbody 직접 탐색으로 효율적 파싱
  - 제목 컬럼: `<td class="tbl-subject">` 클래스로 식별
- **본문 영역**:
  - 특이하게 `<td class="board-content">` 내에 본문 포함
  - div가 아닌 td 태그 사용이 특징
- **첨부파일**:
  - Font Awesome 아이콘 사용: `<i class="fa fa-file-text-o">`
  - 첨부파일 영역 식별에 아이콘 클래스 활용
  - 다운로드 URL: `/common/downloadBoardFile.do?seq=xxx` 형식
- **외부 사이트 리다이렉트**:
  - 일부 공고가 다른 도메인(cnsp.or.kr)으로 리다이렉트됨
  - 유연한 도메인 처리 필요

### 각 사이트별 주요 기술적 특징 요약

1. **BTP (부산테크노파크)**
   - 표준 게시판 구조
   - 직접 링크 방식의 첨부파일
   - UTF-8 인코딩

2. **ITP (인천테크노파크)** 
   - JavaScript 함수 기반 네비게이션
   - onclick 이벤트에서 파라미터 추출
   - 파일 다운로드 시 Referer 헤더 필요

3. **CCEI (충북창조경제혁신센터)**
   - AJAX/JSON API 기반
   - POST 요청으로 데이터 페칭
   - 파일 정보가 목록 API 응답에 UUID로 포함
   - ISO-8859-1 → UTF-8 파일명 디코딩

4. **KIDP (한국디자인진흥원)**
   - JavaScript 렌더링 필요
   - 복잡한 URL 파라미터 구조
   - mode=list 파라미터 필수

5. **GSIF (강릉과학산업진흥원)**
   - Base64 인코딩된 게시글 ID
   - 특수한 테이블 구조 (img_td 클래스)
   - RFC 5987 형식 파일명 처리
   - EUC-KR 인코딩

6. **DJBEA (대전일자리경제진흥원)**
   - SSL 인증서 문제
   - JavaScript doViewNew() 함수 파싱
   - 동적 메뉴 ID 처리

7. **MIRE (환동해산업연구원)**
   - PHP 세션 기반 인증
   - EUC-KR 인코딩 (페이지 & 파일명)
   - 동적 세션 ID 획득 필요
   - 특수한 링크 패턴 (type=read)

8. **JBF (전남바이오진흥원)**
   - URL 경로 보정 필요 (/main/ 추가)
   - 표준 테이블 구조
   - 명확한 클래스명 사용

9. **CEPA (충남경제진흥원)**
   - SSL 인증서 검증 비활성화 필요
   - td 태그를 본문 컨테이너로 사용
   - Font Awesome 아이콘 기반 첨부파일 식별
   - 외부 도메인 리다이렉트 처리

### 공통 패턴 및 모범 사례

1. **인코딩 처리 우선순위**
   - EUC-KR → UTF-8 → Latin-1 → 원본 순서로 시도
   - 파일명과 페이지 인코딩 별도 처리

2. **URL 생성 전략**
   - 상대 경로는 항상 base_url과 조합
   - 특수 경로(/main/, /kor/ 등) 필요 시 명시적 추가
   - JavaScript 함수 파라미터는 정규표현식으로 추출

3. **본문 추출 전략**
   - 특정 클래스/ID 우선 탐색
   - 실패 시 대체 선택자로 폴백
   - 마지막 수단으로 텍스트 길이 기반 추출

4. **첨부파일 처리**
   - 다운로드 URL 패턴 사전 분석 필수
   - Referer, 세션 쿠키 등 헤더 관리
   - 파일명 추출 시 다양한 소스 확인 (Content-Disposition, URL, 링크 텍스트)