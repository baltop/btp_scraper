# Claude Code 작업 로그

## 프로젝트: 지원사업 공고 수집 프로그램

### 1. 초기 요청 및 BTP 스크래퍼 구현
- **요청**: "https://www.btp.or.kr/kor/CMS/Board/Board.do?mCode=MN013 에 대해서 처리할 수 있는 프로그램을 만들어줘."
- **구현**: 부산테크노파크(BTP) 웹 스크래퍼 구현
  - 페이지네이션 기반 공고 목록 수집
  - 각 공고의 상세 페이지 접근
  - 공고 내용을 Markdown으로 변환하여 저장
  - 첨부파일 다운로드 기능

### 2. BTP 첨부파일 다운로드 문제 해결
- **문제**: "첨부파일은 하나도 다운로드 되어 있지 않아. 수정해줘."
- **해결**: URL 구성 수정
  - 상대 경로를 절대 경로로 변환
  - `/kor/` 경로 추가하여 올바른 다운로드 URL 생성

### 3. 파일명 가독성 개선
- **문제**: "파일 이름을 알아볼 수 없어. 공고 상세페이지에 있는 파일명처럼 읽을 수 있게 해줘."
- **해결**: URL 디코딩 및 문자 치환
  - `urllib.parse.unquote()` 사용하여 URL 인코딩된 파일명 디코딩
  - '+' 문자를 공백으로 치환

### 4. 다중 페이지 처리 확인
- **요청**: "현재 1페이지만 처리되는 데 4페이지까지 처리되도록 해줘."
- **확인**: 기본값이 이미 4페이지로 설정되어 있음

### 5. ITP 사이트 지원 추가
- **요청**: "https://itp.or.kr/intro.asp?tmid=13 도 마찬가지로 처리되도록 수정해줘."
- **구현**: 
  - 추상 기본 클래스 `BaseScraper` 생성
  - 인천테크노파크(ITP) 전용 스크래퍼 구현
  - 통합 실행 스크립트 `tp_scraper.py` 생성
- **문제**: JavaScript 기반 파일 다운로드로 인해 첨부파일 다운로드 실패

### 6. CCEI 사이트 지원 추가
- **요청**: "https://ccei.creativekorea.or.kr/chungbuk/custom/notice_list.do? 사이트도 추가해서 처리해줘."
- **구현**: 충북창조경제혁신센터(CCEI) 스크래퍼 구현
  - AJAX/JSON 기반 데이터 페칭
  - POST 요청으로 목록 및 상세 페이지 접근

### 7. CCEI 첨부파일 다운로드 수정
- **문제**: "ccei에 첨부파일 다운로드가 없네. 수정해줘."
- **해결**: HTML 구조 분석 및 파서 수정
  - dl/dt/dd 구조로 된 첨부파일 영역 파싱
  - 첨부파일 링크 추출 로직 개선

### 8. 전체 사이트 4페이지 수집
- **요청**: "전체 사이트에 대해 4페이지를 전부 수집해줘."
- **실행**: BTP, ITP, CCEI 각 4페이지씩 수집 완료

### 9. KIDP 사이트 지원 추가
- **요청**: "https://kidp.or.kr/?menuno=1202 사이트도 추가해줘."
- **구현**: 한국디자인진흥원(KIDP) 스크래퍼 구현
  - `mode=list` 파라미터 추가로 목록 페이지 접근
  - 상세 페이지 URL 패턴 분석 및 적용
  - 테이블 구조 파싱 개선

### 10. KIDP 첨부파일 다운로드 문제
- **문제**: "kidp의 첨부파일 다운로드가 구현되지 않았음. 수정해줘."
- **분석**: 
  - JavaScript `submitForm` 함수를 통한 파일 다운로드
  - 실제 파일 대신 HTML 페이지만 다운로드됨
  - 브라우저 자동화 도구(Playwright) 필요

## 최종 구현 상태

### 스크래퍼 구조
```
btp_scraper/
├── base_scraper.py      # 추상 기본 클래스
├── btp_scraper.py       # 부산테크노파크 스크래퍼
├── itp_scraper.py       # 인천테크노파크 스크래퍼
├── ccei_scraper.py      # 충북창조경제혁신센터 스크래퍼
├── kidp_scraper.py      # 한국디자인진흥원 스크래퍼
└── tp_scraper.py        # 통합 실행 스크립트
```

### 사용법
```bash
# 개별 사이트 수집
python tp_scraper.py --site btp    # 부산테크노파크
python tp_scraper.py --site itp    # 인천테크노파크
python tp_scraper.py --site ccei   # 충북창조경제혁신센터
python tp_scraper.py --site kidp   # 한국디자인진흥원

# 전체 사이트 수집
python tp_scraper.py --site all

# 페이지 수 지정
python tp_scraper.py --site btp --pages 2
```

### 각 사이트별 특징 및 상태

1. **BTP (부산테크노파크)**
   - ✅ 공고 수집 정상 작동
   - ✅ 첨부파일 다운로드 정상 작동
   - 특징: 표준적인 게시판 구조

2. **ITP (인천테크노파크)**
   - ✅ 공고 수집 정상 작동
   - ❌ 첨부파일 다운로드 실패 (JavaScript 보안)
   - 특징: JavaScript 함수를 통한 파일 다운로드

3. **CCEI (충북창조경제혁신센터)**
   - ✅ 공고 수집 정상 작동
   - ✅ 첨부파일 다운로드 정상 작동
   - 특징: AJAX/JSON 기반, 대부분 공고에 첨부파일 없음

4. **KIDP (한국디자인진흥원)**
   - ✅ 공고 수집 정상 작동
   - ❌ 첨부파일 다운로드 실패 (HTML만 다운로드됨)
   - 특징: JavaScript 기반 동적 페이지

### 주요 기술적 구현

1. **객체지향 설계**
   - 추상 기본 클래스를 통한 공통 기능 구현
   - 각 사이트별 특화 기능은 하위 클래스에서 구현

2. **다양한 웹 구조 대응**
   - 정적 HTML 파싱 (BeautifulSoup)
   - AJAX/JSON 데이터 처리
   - JavaScript 함수 파라미터 추출 (정규표현식)

3. **파일 처리**
   - URL 인코딩/디코딩
   - 파일명 정규화
   - 디렉토리 구조 관리

4. **에러 처리**
   - SSL 인증서 검증 처리
   - 타임아웃 처리
   - 예외 상황 로깅

### 향후 개선 사항

1. **JavaScript 기반 사이트 대응**
   - Playwright 또는 Selenium 통합
   - ITP, KIDP 첨부파일 다운로드 구현

2. **성능 최적화**
   - 비동기 처리 도입
   - 병렬 다운로드 구현

3. **기능 확장**
   - 중복 공고 체크
   - 증분 수집 (새로운 공고만 수집)
   - 데이터베이스 연동