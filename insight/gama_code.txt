# GAMA (광주미래차모빌리티진흥원) 스크래퍼 개발 인사이트

## 사이트 특성 분석

### 기본 정보
- **사이트 코드**: gama
- **URL**: https://gama.or.kr/bbs/?b_id=green_notice&site=basic&mn=1136
- **사이트명**: 광주미래차모빌리티진흥원 공지사항
- **인코딩**: UTF-8
- **SSL**: 유효한 인증서 사용

### 사이트 구조 특징
1. **페이지네이션**: offset 기반 (15개씩, offset=0,15,30...)
2. **게시판 구조**: 표준 HTML 테이블 기반
3. **첨부파일**: 대부분 이미지 포스터 (JPG, PNG), 일부 PDF, MP4
4. **본문**: 본문 텍스트가 거의 없고 대부분 이미지로 구성

## 기술적 구현 특징

### 1. 페이지네이션 처리
```python
def get_list_url(self, page_num: int) -> str:
    if page_num == 1:
        return self.list_url
    else:
        # 15개씩 노출되므로 offset = (page_num - 1) * 15
        offset = (page_num - 1) * 15
        return f"{self.list_url}&offset={offset}"
```

### 2. 목록 페이지 파싱
- 표준 HTML 테이블 구조
- tbody 내 tr 요소들을 반복 처리
- 제목 셀(두 번째 td)에서 링크 추출
- 상대 경로 URL을 절대 경로로 변환

```python
# URL 구성 로직
if href.startswith('?'):
    detail_url = self.base_url + '/bbs/' + href
else:
    detail_url = urljoin(self.base_url, href)
```

### 3. 상세 페이지 파싱 - 이미지 중심 구조
GAMA의 독특한 특징은 본문 텍스트가 거의 없고 이미지로 공고 내용을 표시한다는 점입니다.

```python
def parse_detail_page(self, html_content: str) -> dict:
    # 1. 테이블에서 이미지 찾기
    for row in reversed(rows):
        img_cell = row.find('td')
        if img_cell and img_cell.find('img'):
            img = img_cell.find('img')
            if img and img.get('src'):
                img_src = urljoin(self.base_url, img.get('src'))
                content = f"![공고 이미지]({img_src})\n\n"
    
    # 2. 첨부파일 정보 추출
    for row in rows:
        header = row.find('th')
        if header and '첨부' in header.get_text():
            # 첨부파일 링크와 크기 정보 추출
```

### 4. 첨부파일 다운로드
- 직접 다운로드 링크 제공
- 파일 크기 정보가 페이지에 표시됨 (예: 0.07MB, 3.91MB)
- 다양한 파일 형식: PDF, JPG, PNG, MP4

## 주요 해결책

### 1. URL 처리
GAMA는 상대 경로가 `?`로 시작하는 특이한 구조를 가집니다:
```python
if href.startswith('?'):
    detail_url = self.base_url + '/bbs/' + href
```

### 2. 이미지 중심 콘텐츠 처리
본문 텍스트가 거의 없어서 이미지를 마크다운으로 포함:
```python
if not content.strip():
    content = "## 공고 내용\n\n공고 내용을 확인하려면 첨부파일을 다운로드하여 확인하세요.\n\n"
```

### 3. 파일 크기 정보 추출
페이지에서 제공되는 파일 크기 정보를 활용:
```python
size_match = re.search(r'\(([^)]+MB)\)', size_text)
if size_match:
    size_info = size_match.group(1)
```

## 테스트 결과

### 성공률
- **페이지 파싱**: 100% 성공
- **첨부파일 다운로드**: 100% 성공 (11/11)
- **인코딩**: 문제없음 (UTF-8)

### 파일 통계 (1페이지 테스트)
- **총 공고 수**: 11개 (첫 페이지)
- **내용 파일**: 11개 (모든 공고에 content.md 생성)
- **첨부파일**: 11개 (모든 공고에 첨부파일 존재)

### 다운로드된 파일 크기 분석
1. **PDF**: 71,580 bytes (0.07MB)
2. **이미지(PNG)**: 357,087 - 4,001,908 bytes (0.35MB - 3.91MB)
3. **이미지(JPG)**: 874,213 - 2,455,492 bytes (0.85MB - 2.40MB)
4. **동영상(MP4)**: 49,891,609 - 184,336,384 bytes (47MB - 175MB)

## 재사용 가능한 패턴

### 1. StandardTableScraper 활용
GAMA는 표준 HTML 테이블 구조를 따르므로 `StandardTableScraper`를 기반으로 구현했습니다.

### 2. 이미지 중심 사이트 처리 패턴
```python
# 이미지 찾기
img = img_cell.find('img')
if img and img.get('src'):
    img_src = urljoin(self.base_url, img.get('src'))
    content = f"![공고 이미지]({img_src})\n\n"
```

### 3. 파일 크기 추출 패턴
```python
size_match = re.search(r'\(([^)]+MB)\)', size_text)
```

## 특별한 기술적 도전과 해결책

### 1. 대용량 파일 다운로드
일부 MP4 파일이 240MB가 넘어 다운로드 시간이 오래 걸립니다.
- **해결책**: 스트리밍 다운로드 사용 (`stream=True`)
- **개선점**: 필요시 파일 크기 제한 옵션 추가 가능

### 2. 콘텐츠 부족 문제
대부분의 공고가 텍스트 내용 없이 이미지만 제공합니다.
- **해결책**: 기본 안내 메시지 추가 + 이미지 마크다운 링크 생성

### 3. 파일명 처리
한글 파일명과 특수문자가 포함된 파일명 처리:
- **해결책**: `sanitize_filename()` 메소드로 안전한 파일명 생성

## 성능 특성

### 속도
- **페이지 파싱**: 매우 빠름 (표준 HTML 구조)
- **파일 다운로드**: 파일 크기에 따라 가변적 (240MB 파일은 약 17초)

### 안정성
- **HTTP 상태**: 모든 요청 성공
- **SSL**: 문제없음
- **인코딩**: UTF-8으로 일관됨

## 향후 개선 방향

1. **대용량 파일 처리**: 
   - 파일 크기 제한 옵션 추가
   - 병렬 다운로드 지원

2. **콘텐츠 추출 개선**:
   - OCR을 통한 이미지 텍스트 추출 고려
   - 이미지 메타데이터 추출

3. **모니터링 강화**:
   - 다운로드 진행률 표시
   - 실패한 파일 재시도 로직

## 결론

GAMA 스크래퍼는 표준적인 HTML 테이블 구조로 구현이 용이했습니다. 
주요 특징은 텍스트 콘텐츠가 적고 이미지/첨부파일 중심이라는 점이며, 
대용량 동영상 파일 다운로드로 인한 시간 소요가 주요 고려사항입니다.

전체적으로 안정적이고 성공률이 높은 스크래퍼로 구현되었습니다.