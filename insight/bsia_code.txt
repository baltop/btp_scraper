# BSIA(부산경남봉제산업협동조합) 스크래퍼 개발 인사이트

## 1. 사이트 특성 분석

### 기본 정보
- **사이트명**: 부산경남봉제산업협동조합 - 공지사항
- **URL**: https://www.bsia.kr/notice
- **관리기관**: 부산경남봉제산업협동조합
- **인코딩**: UTF-8
- **SSL**: 지원

### 사이트 구조 특징
- **게시판 형태**: 표준 HTML 테이블 기반
- **페이지네이션**: GET 파라미터 방식 (`page_no=2`)
- **상세페이지 접근**: JavaScript 함수 `viewDetail()` 사용
- **첨부파일**: 상세페이지 내 별도 섹션으로 구성

## 2. 기술적 구현 특징

### 2.1 목록 페이지 파싱
```python
# 특징: 표준 테이블 구조 (NO, 분류, 제목, 등록일)
- 테이블: <table> → <tbody> → <tr>
- 컬럼 구조: 번호, 분류, 제목, 등록일
- 제목 클릭: onclick="javascript:viewDetail(this, 203, '/notice');"
```

**핵심 해결책**:
```python
# JavaScript 함수에서 공고 ID 추출
onclick = link_elem.get('onclick', '')
match = re.search(r'viewDetail\s*\(\s*[^,]+,\s*(\d+),\s*[^)]+\)', onclick)
if match:
    notice_id = match.group(1)
    detail_url = f"{self.base_url}/notice?command=view&id={notice_id}&page_no=1&category2=&search_key=subject&category=&search_keyword="
```

### 2.2 상세 페이지 구조
- **본문**: 간단한 텍스트 형태 ("봉제인과 함께 미래를 만들어 갑니다")
- **첨부파일**: 별도 h5 섹션에서 ul/li 구조로 제공
- **메타정보**: 작성일, 조회수 등이 포함된 상세 정보

### 2.3 첨부파일 다운로드
**URL 패턴**:
```
/download/notice/{notice_id}
```

**특징**:
- 파일명이 한글로 제공됨 (예: "[신청서] 2025년 패션창업 인큐베이팅 지원.hwp")
- Content-Disposition 헤더를 통해 실제 파일명 제공
- 다양한 파일 형식 지원 (HWP, HWPX, PDF, PNG)

## 3. 주요 해결책

### 3.1 JavaScript 기반 네비게이션 처리
**문제**: onclick 이벤트에서 viewDetail() 함수 호출
**해결책**: 정규표현식으로 공고 ID 추출 후 GET 파라미터 방식 URL 구성

```python
def parse_list_page(self, html_content: str) -> List[Dict[str, Any]]:
    # onclick="javascript:viewDetail(this, 203, '/notice');" 패턴 처리
    onclick = link_elem.get('onclick', '')
    if onclick:
        match = re.search(r'viewDetail\s*\(\s*[^,]+,\s*(\d+),\s*[^)]+\)', onclick)
        if match:
            notice_id = match.group(1)
            detail_url = f"{self.base_url}/notice?command=view&id={notice_id}..."
```

### 3.2 긴 파일명 처리
**문제**: 파일 시스템 제한으로 인한 "[Errno 36] File name too long" 오류
**해결책**: 베이스 스크래퍼의 sanitize_filename() 메소드 활용

```python
# 자동 파일명 길이 제한 및 정리
filename = self.sanitize_filename(decoded.replace('+', ' '))
```

### 3.3 한글 파일명 처리
**성공**: UTF-8 인코딩으로 한글 파일명 완벽 처리
- 예: "[신청서] 2025년 패션창업 인큐베이팅 지원.hwp"
- 예: "2025 환경개선사업 설명회 개최 (홈페이지용) 2.png"

## 4. 테스트 결과

### 4.1 성공률
- **목록 파싱**: 100% (29개 공고 모두 성공)
- **상세 페이지 파싱**: 100%
- **첨부파일 다운로드**: 95% (44개 중 42개 성공, 2개 긴 파일명으로 실패)

### 4.2 다운로드 통계
- **총 공고 수**: 29개 (3페이지)
- **총 폴더 수**: 55개 (공고 + 첨부파일 폴더)
- **총 첨부파일 수**: 44개
- **파일 타입 분포**:
  - HWP: 25개 (57%)
  - HWPX: 6개 (14%)
  - PDF: 10개 (23%)
  - PNG: 3개 (7%)
- **총 다운로드 크기**: 14MB

### 4.3 대용량 파일 처리
**큰 파일들** (1MB 이상):
- 서류발급안내 및 신청서 양식.hwpx: 2.0MB × 3개
- 환경개선사업 신청서 관련 파일: 900KB 이상

## 5. 재사용 가능한 패턴

### 5.1 표준 협동조합/단체 패턴
```python
class EnhancedBSIAScraper(StandardTableScraper):
    # 표준 테이블 기반 스크래퍼 상속
    # JavaScript viewDetail() 함수 처리
    # 간단한 본문 + 첨부파일 중심 구조
```

### 5.2 적용 가능한 유사 사이트
- 산업협동조합 계열 사이트
- JavaScript 기반 게시판 네비게이션
- 첨부파일 중심의 공고 구조

## 6. 특별한 기술적 도전과 해결책

### 6.1 JavaScript viewDetail() 함수 처리
**도전**: `viewDetail(this, 203, '/notice')` 형태의 함수 호출
**해결**: 정규표현식으로 공고 ID 추출 및 GET 파라미터 방식 변환

### 6.2 파일명 길이 제한 문제
**도전**: 일부 첨부파일의 긴 한글 파일명으로 인한 파일 시스템 오류
**부분적 해결**: sanitize_filename() 메소드로 대부분 해결, 극히 일부 초장문 파일명은 실패

### 6.3 간단한 본문 구조
**특징**: 대부분 공고의 본문이 매우 간단 ("봉제인과 함께 미래를 만들어 갑니다")
**처리**: 첨부파일 중심의 정보 전달 방식으로 판단, 첨부파일 추출에 집중

## 7. 성능 및 안정성

### 7.1 실행 시간
- **3페이지 스크래핑**: 약 1분 30초 예상
- **페이지당 평균**: 약 30초
- **공고당 평균**: 약 3초

### 7.2 안정성 요소
- SSL 인증서 정상 지원
- 요청 간 1초 대기로 서버 부하 방지
- 페이지 간 2초 대기로 안정성 확보
- 오류 처리 및 계속 진행 로직

## 8. 베스트 프랙티스

### 8.1 코드 구조
```python
# 1. StandardTableScraper 상속으로 공통 기능 활용
# 2. JavaScript 이벤트 처리를 위한 정규표현식 활용
# 3. 한글 파일명 지원을 위한 인코딩 처리
# 4. 파일명 길이 제한 고려한 sanitization
```

### 8.2 에러 핸들링
- JavaScript 파싱 실패 시 대체 방법 제공
- 파일명 처리 실패 시 기본 파일명 사용
- 부분적 실패 시에도 계속 진행

### 8.3 파일 시스템 고려사항
- 한글 파일명 완전 지원
- 폴더명 및 파일명 길이 제한 (일부 극한 상황 제외)
- 첨부파일별 개별 폴더 구성

## 9. 실무 적용 시 고려사항

### 9.1 성공적 요소
- **표준 테이블 구조**: 파싱이 용이한 일관된 구조
- **UTF-8 인코딩**: 한글 처리에 문제없음
- **명확한 첨부파일 구조**: h5 → ul → li 패턴으로 일관성 있음

### 9.2 제한 사항
- **긴 파일명**: 일부 극단적으로 긴 파일명의 경우 파일 시스템 제한
- **간단한 본문**: 대부분 공고의 본문 내용이 매우 간소함
- **JavaScript 의존성**: 목록 페이지에서 상세 페이지로의 접근이 JavaScript 기반

## 10. 결론

BSIA 사이트는 표준적인 협동조합/단체 웹사이트 패턴을 잘 따르고 있어 스크래핑이 전반적으로 용이했습니다. JavaScript 기반 네비게이션과 일부 긴 파일명 처리가 주요 도전 과제였으나, 대부분 성공적으로 해결되었습니다.

특히 첨부파일 중심의 정보 제공 방식이 특징적이며, 실제 공고 내용은 첨부파일에 담겨있어 첨부파일 다운로드가 매우 중요한 사이트입니다. 향상된 베이스 스크래퍼의 기능을 잘 활용하여 실무에서 바로 사용 가능한 수준의 스크래퍼가 완성되었습니다.

전체적으로 95% 이상의 성공률을 보여주며, 패션/봉제 산업 관련 지원사업 정보 수집에 효과적으로 활용할 수 있습니다.