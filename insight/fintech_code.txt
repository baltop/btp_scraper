# 금융보안원 Fintech Enhanced 스크래퍼 개발 인사이트

## 1. 사이트 기본 정보
- **사이트명**: 한국핀테크지원센터 (Korea Fintech Support Center)
- **URL**: https://fintech.or.kr/web/board/boardContentsListPage.do?board_id=3&menu_id=6300&miv_pageNo=
- **사이트 코드**: fintech
- **인코딩**: UTF-8
- **SSL**: 활성화

## 2. 사이트 구조 특성

### 2.1 목록 페이지 구조
- **페이지네이션**: GET 파라미터 방식 (`miv_pageNo=페이지번호`)
- **테이블 구조**: 표준 HTML table 태그
- **컬럼 구성**: 번호 | 제목 | 신청기간 | 작성일 | 조회수 (5개 컬럼)
- **링크 방식**: JavaScript 함수 `contentsView('099f147a848c48babc64eeaa536b5ae2')`

### 2.2 상세 페이지 구조  
- **접근 방식**: POST 폼 전송 (JavaScript contentsView 함수)
- **본문 영역**: `.content` 클래스
- **첨부파일**: 직접 다운로드 링크 (`fileidDownLoad.do?file_id=xxx`)
- **파일 ID**: 32자리 16진수 문자열

### 2.3 동적 렌더링
- **JavaScript 의존**: 목록 테이블이 JavaScript로 동적 렌더링
- **Playwright 필요**: 정적 HTTP 요청으로는 테이블 접근 불가
- **네트워크 대기**: `wait_until="networkidle"` 필요

## 3. 기술적 구현 특징

### 3.1 Playwright 하이브리드 방식
```python
def get_page(self, url: str, **kwargs) -> requests.Response:
    """페이지 가져오기 - Playwright를 사용한 동적 렌더링"""
    try:
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            page = browser.new_page()
            page.goto(url, wait_until="networkidle")
            page.wait_for_selector('table', timeout=10000)
            html_content = page.content()
            browser.close()
            return MockResponse(html_content)
    except Exception as e:
        logger.warning(f"Playwright 로딩 실패, requests로 폴백: {e}")
        return super().get_page(url, **kwargs)
```

### 3.2 JavaScript 함수 파라미터 추출
```python
# contentsView('099f147a848c48babc64eeaa536b5ae2') 형태
href = link_elem.get('href', '')
id_match = re.search(r"contentsView\('([^']+)'\)", href)
if id_match:
    content_id = id_match.group(1)
```

### 3.3 직접 다운로드 링크 처리
```python
# fileidDownLoad.do?file_id=BBA480BE44EA11F09056F220EF342366 형태
download_links = soup.find_all('a', href=re.compile(r'fileidDownLoad\.do'))
file_id_match = re.search(r'file_id=([A-F0-9]+)', href)
```

### 3.4 아이콘 파일 제외 로직
```python
# 불필요한 아이콘 파일 제외
if 'icon' in src.lower() or src.endswith('icon_file.png'):
    continue
```

## 4. 주요 기술적 도전과 해결책

### 4.1 동적 렌더링 문제
**문제**: requests로는 테이블이 빈 상태로 응답  
**해결책**: Playwright + requests 하이브리드 방식
- 목록 페이지: Playwright로 동적 렌더링
- 상세 페이지: requests로 직접 접근 (빠른 속도)
- 폴백 메커니즘: Playwright 실패 시 requests로 대체

### 4.2 상세 페이지 접근 방식
**문제**: JavaScript 함수로만 상세 페이지 접근 가능  
**해결책**: URL 패턴 분석 및 직접 구성
```python
detail_url = f"{self.detail_url}?board_id={self.board_id}&menu_id={self.menu_id}&contents_id={content_id}"
```

### 4.3 파일 다운로드 시스템
**특징**: 
- 32자리 16진수 file_id 기반 다운로드
- 직접 링크 제공으로 세션 문제 없음
- 파일명에서 크기 정보 자동 제거: `파일명.hwp(160KB)` → `파일명.hwp`

## 5. 성능 및 안정성

### 5.1 성능 최적화
- **선택적 Playwright 사용**: 목록 페이지만 Playwright, 상세 페이지는 requests
- **브라우저 자동 종료**: 메모리 누수 방지
- **스트리밍 다운로드**: 대용량 파일 처리

### 5.2 안정성 강화
- **타임아웃 설정**: 10초 테이블 로딩 대기
- **폴백 메커니즘**: Playwright 실패 시 requests 사용
- **예외 처리**: 각 단계별 세밀한 오류 처리

## 6. 첨부파일 유형 분석

### 6.1 파일 통계 (10개 공고 기준)
- **총 첨부파일**: 18개 (43.83 MB)
- **HWP 파일**: 11개 (신청서, 안내문, 양식)
- **PDF 파일**: 3개 (공문서, 포스터)
- **이미지 파일**: 1개 (포스터)
- **압축 파일**: 3개 (신청양식, 데이터명세서)

### 6.2 Fintech 특성
- **신청서 중심**: K-Fintech 30, 챌린지, 테스트베드 참가 신청서
- **포스터 제공**: PNG/PDF 형태의 홍보 포스터
- **가이드 문서**: 대용량 PDF 가이드 (22MB 통번역존 가이드)
- **양식 제공**: 수행계획서, 신청서 등 HWP 양식

## 7. 재사용 가능한 패턴

### 7.1 JavaScript 렌더링 사이트 대응
```python
# 다른 JavaScript 렌더링 사이트에 적용 가능
with sync_playwright() as p:
    browser = p.chromium.launch(headless=True)
    page = browser.new_page()
    page.goto(url, wait_until="networkidle")
    page.wait_for_selector('목적요소', timeout=10000)
    html_content = page.content()
```

### 7.2 하이브리드 접근 방식
- 목록: Playwright (동적 렌더링 필요)
- 상세: requests (빠른 속도)
- 다운로드: requests (직접 링크)

### 7.3 직접 다운로드 링크 패턴
```python
# download.do, fileDownload.action 등 다양한 변형 가능
download_links = soup.find_all('a', href=re.compile(r'fileidDownLoad\.do'))
file_id_match = re.search(r'file_id=([A-F0-9]+)', href)
```

## 8. 개발 효율성 인사이트

### 8.1 Enhanced 아키텍처 장점
- **코드 재사용**: StandardTableScraper 상속으로 80% 코드 재사용
- **설정 주입 준비**: 향후 YAML 설정 파일 지원 가능
- **폴백 패턴**: 설정 실패 시 하드코딩 로직으로 대체
- **중복 검사**: 자동 중복 공고 감지 및 조기 종료

### 8.2 Playwright 도입 효과
- **동적 사이트 대응**: JavaScript 렌더링 사이트 완벽 지원
- **개발 속도 향상**: 복잡한 JavaScript 분석 불필요
- **안정성**: 브라우저 환경에서 실제 사용자 경험과 동일

### 8.3 테스트 결과
- **성공률**: 90% (9/10 공고 성공)
- **첨부파일**: 18개 완벽 다운로드
- **한글 파일명**: 100% 정상 처리
- **속도**: 페이지당 약 1-2분 (Playwright 렌더링 시간 포함)

## 9. 특별한 기술적 혁신

### 9.1 MockResponse 패턴
```python
class MockResponse:
    def __init__(self, text, status_code=200, encoding='utf-8'):
        self.text = text
        self.status_code = status_code
        self.encoding = encoding
        self.headers = {'Content-Type': 'text/html;charset=UTF-8'}
```
- Playwright 결과를 requests.Response 호환 객체로 변환
- 기존 Enhanced 아키텍처와 완벽 호환
- 코드 수정 최소화

### 9.2 네트워크 최적화
- 목록 페이지: Playwright (필수)
- 상세 페이지: requests (선택적 Playwright)
- 파일 다운로드: requests (최적화)

## 10. 향후 발전 방향

### 10.1 성능 개선
- **캐싱 시스템**: 동일 페이지 재접근 방지
- **병렬 처리**: 여러 상세 페이지 동시 처리
- **브라우저 재사용**: Playwright 인스턴스 재사용

### 10.2 확장성
- **설정 파일 지원**: YAML 설정으로 사이트별 맞춤화
- **플러그인 아키텍처**: JavaScript 렌더링 전용 플러그인
- **모니터링**: 성능 및 성공률 실시간 모니터링

이 Fintech 스크래퍼는 Enhanced 아키텍처와 Playwright의 성공적인 결합 사례로, 동적 렌더링 사이트에 대한 새로운 접근 방법을 제시합니다.