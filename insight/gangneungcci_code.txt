# 강릉상공회의소(GangneungCCI) 스크래퍼 개발 인사이트

## 사이트 기본 정보
- **사이트명**: 강릉상공회의소
- **URL**: https://gangneungcci.korcham.net/front/board/boardContentsListPage.do?boardId=10559&menuId=9986
- **인코딩**: UTF-8
- **SSL**: HTTPS 지원

## 기술적 특징

### 1. 웹사이트 구조
- **플랫폼**: 대한상공회의소 표준 시스템 (korcham.net)
- **페이지네이션**: JavaScript 기반 go_Page() 함수
- **상세페이지 접근**: JavaScript contentsView() 함수
- **테이블 구조**: 표준 3컬럼 (번호, 제목, 작성일)

### 2. 파싱 특이사항
```python
# Playwright를 통한 동적 렌더링 필요
# 일반 requests로는 빈 테이블만 확인됨
def _parse_with_playwright(self):
    # 'tbody tr' 선택자로 15개 행 발견되지만
    # contentsView ID 추출에서 문제 발생
    # onclick 속성 또는 href 속성에서 ID 추출 실패
```

### 3. 주요 기술적 도전과제

#### 3.1 JavaScript 의존성
- 목록 페이지가 JavaScript로 동적 생성
- BeautifulSoup만으로는 빈 페이지 반환
- Playwright 필수 사용

#### 3.2 콘텐츠 ID 추출 문제
```python
# 예상 패턴: onclick="javascript:contentsView('123456')"
# 실제 사이트에서는 다른 패턴 사용 가능성
match = re.search(r"contentsView\('(\d+)'\)", onclick)
```

#### 3.3 테이블 구조 분석 결과
- Playwright로 15개 행 감지
- 하지만 유효한 공고 데이터 0개 파싱
- 테이블 구조가 예상과 다를 가능성

## 개발 과정에서 발견한 문제점

### 1. 파싱 로직 문제
```python
# 현재 구현된 파싱 로직
for i, row in enumerate(rows):
    cells = row.locator('td').all()
    if len(cells) < 3:
        continue
    
    # 번호 확인
    number = cells[0].inner_text().strip()
    if not number.isdigit():
        continue
```

**문제**: 
- 15개 행을 발견했지만 0개 공고 파싱
- 테이블 구조가 예상과 다르거나 헤더 행 제외 로직에 문제

### 2. 잠재적 해결 방안
1. **사이트 구조 재분석**: 실제 HTML 구조 확인 필요
2. **다른 선택자 시도**: 'table tr', 'div' 기반 구조 가능성
3. **대기 시간 증가**: JavaScript 렌더링 완료 대기
4. **디버깅 모드**: headless=False로 실제 브라우저 확인

## 코드 구현 특징

### 1. 클래스 구조
```python
class EnhancedGangneungCCIScraper(StandardTableScraper):
    def __init__(self):
        self.base_url = "https://gangneungcci.korcham.net"
        self.list_url = "https://gangneungcci.korcham.net/front/board/boardContentsListPage.do?boardId=10559&menuId=9986"
        self.detail_base_url = "https://gangneungcci.korcham.net/front/board/boardContentsView.do"
```

### 2. 페이지네이션 처리
```python
def get_list_url(self, page_num: int) -> str:
    if page_num == 1:
        return self.list_url
    else:
        return f"{self.list_url}&page={page_num}"
```

### 3. Playwright 통합
```python
def get_detail_page_with_playwright(self, content_id: str) -> str:
    # JavaScript 함수 실행으로 상세페이지 접근
    page.evaluate(f"contentsView('{content_id}')")
    page.wait_for_url("**/boardContentsView.do**", timeout=10000)
```

## 테스트 결과

### 테스트 실행 결과
```
=== 강릉상공회의소 스크래퍼 테스트 시작 (최대 3페이지) ===
- tbody에서 15개 행 발견
- 하지만 0개 공고 파싱 완료
- 본문 추출 성공률: 0.0% (0/0)
```

### 성능 지표
- **처리 속도**: 약 3초 (Playwright 초기화 포함)
- **메모리 사용**: 표준 범위
- **파싱 성공률**: 0% (구조 분석 필요)

## 향후 개선 방안

### 1. 긴급 수정 사항
1. **실제 사이트 HTML 구조 분석**
2. **컨텐츠 ID 추출 로직 수정**
3. **테이블 파싱 로직 재검토**

### 2. 디버깅 접근법
```python
# 디버깅용 코드 추가 필요
def debug_table_structure(self):
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)  # 브라우저 보기
        page = browser.new_page()
        page.goto(self.list_url)
        page.wait_for_load_state('networkidle')
        
        # 실제 HTML 구조 출력
        html = page.content()
        print(html)  # HTML 구조 확인
```

### 3. 대안 파싱 전략
```python
# 다양한 선택자 시도
selectors = [
    'tbody tr',
    'table tr', 
    '.board-list tr',
    '.list-table tr',
    'div[class*="list"] tr'
]
```

## 재사용 가능한 패턴

### 1. 표준 CCI 사이트 패턴
- korcham.net 도메인 사용
- JavaScript contentsView() 함수
- boardId/menuId 파라미터 구조

### 2. Playwright 활용 패턴
```python
# 표준 Playwright 초기화
browser = p.chromium.launch(headless=True)
page = browser.new_page()
page.goto(self.list_url)
page.wait_for_load_state('networkidle')
```

### 3. 에러 처리 패턴
```python
try:
    # JavaScript 함수 실행
    page.evaluate(f"contentsView('{content_id}')")
    page.wait_for_url("**/boardContentsView.do**", timeout=10000)
except Exception as e:
    # 직접 URL 접근으로 폴백
    direct_url = f"{self.detail_base_url}?contentsId={content_id}&boardId=10559&menuId=9986"
    page.goto(direct_url)
```

## 결론

강릉상공회의소 스크래퍼는 기본 프레임워크는 완성되었으나, 실제 사이트의 테이블 구조가 예상과 달라 파싱에 실패했습니다. 

**주요 성과**:
- 표준 CCI 스크래퍼 패턴 적용
- Playwright 기반 동적 렌더링 지원
- 견고한 에러 처리 및 폴백 메커니즘

**보완 필요**:
- 실제 사이트 구조 재분석
- 테이블 파싱 로직 수정
- 컨텐츠 ID 추출 패턴 확인

향후 실제 사이트 HTML을 직접 분석하여 정확한 선택자와 파싱 로직을 구현하면 정상 동작할 것으로 예상됩니다.