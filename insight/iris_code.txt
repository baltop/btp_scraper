# IRIS (국가과학기술연구회) Enhanced 스크래퍼 개발 인사이트

## 사이트 분석
- **URL**: https://www.iris.go.kr/contents/retrieveBsnsAncmBtinSituListView.do
- **사이트 유형**: Spring Framework + JSON API 하이브리드 구조
- **특징**: .do 확장자의 전형적인 Spring MVC 패턴과 AJAX/POST 기반 데이터 처리

## 기술적 구현 특징

### 1. 하이브리드 아키텍처 처리
IRIS는 독특한 아키텍처를 가지고 있습니다:
- **목록 페이지**: Spring Framework .do 엔드포인트
- **데이터 API**: POST 요청으로 JSON 응답 (`retrieveBsnsAncmBtinSituList.do`)
- **상세 페이지**: POST 요청으로 HTML 응답 (`retrieveBsnsAncmView.do`)

```python
def get_page_data(self, page_num: int) -> dict:
    """POST 요청으로 페이지 데이터 가져오기"""
    post_data = {
        'pageIndex': str(page_num),
        'pageUnit': '10',
        'searchKeyword': '',
        'searchCondition': '',
        'searchBgnDe': '',
        'searchEndDe': '',
        'searchMethType': 'all'
    }
    
    response = self.session.post(self.list_api_url, data=post_data, timeout=self.timeout)
    
    # JSON 응답 시도, 실패 시 HTML 폴백
    try:
        json_data = response.json()
        return {'type': 'json', 'data': json_data, 'status_code': response.status_code}
    except:
        return {'type': 'html', 'content': response.text, 'status_code': response.status_code}
```

### 2. 이중 파싱 시스템 구현
CCEI와 유사하지만 더 유연한 파싱 전략을 구현했습니다:

```python
def parse_list_page(self, page_data: dict) -> List[Dict[str, Any]]:
    """목록 페이지 파싱 - JSON 우선, HTML 폴백"""
    if page_data.get('type') == 'json':
        # JSON API 응답 파싱
        announcements = self.parse_json_response(page_data['data'])
    else:
        # HTML 응답 파싱
        announcements = self.parse_html_response(page_data.get('content', ''))
    
    return announcements
```

### 3. 유연한 JSON 구조 탐지
IRIS의 JSON 구조는 다양한 키를 사용할 수 있어 동적 탐색 로직을 구현했습니다:

```python
def parse_json_response(self, json_data: dict) -> List[Dict[str, Any]]:
    """JSON API 응답 파싱"""
    items = []
    
    # 표준 키 시도
    if 'resultList' in json_data:
        items = json_data['resultList']
    elif 'list' in json_data:
        items = json_data['list']
    elif 'data' in json_data:
        items = json_data['data']
    elif isinstance(json_data, list):
        items = json_data
    else:
        # 중첩된 구조 동적 탐색
        for key, value in json_data.items():
            if isinstance(value, list) and len(value) > 0:
                items = value
                logger.info(f"'{key}' 키에서 목록 발견: {len(items)}개")
                break
    
    return self.extract_announcements_from_items(items)
```

### 4. JavaScript 파라미터 추출
IRIS는 첨부파일 다운로드에 복잡한 JavaScript 함수를 사용합니다:

```python
def _extract_attachments(self, soup: BeautifulSoup) -> List[Dict[str, Any]]:
    """첨부파일 추출"""
    download_links = soup.find_all('a', onclick=re.compile(r'f_bsnsAncm_downloadAtchFile'))
    
    for link in download_links:
        onclick = link.get('onclick', '')
        # f_bsnsAncm_downloadAtchFile('GtjDGwbS/sZBOfjud1F3jQ==','ozjWd09j3U2GT4Z9Ez2lBg==','파일명.hwp' ,'265216')
        pattern = r"f_bsnsAncm_downloadAtchFile\('([^']+)','([^']+)','([^']+)','([^']+)'\)"
        match = re.search(pattern, onclick)
        
        if match:
            file_group_id, file_detail_id, file_name, file_size = match.groups()
            # Base64 인코딩된 파라미터 처리
```

### 5. 보안 제한 대응
IRIS는 정부 사이트로서 강한 보안 정책을 가지고 있어 실제 파일 다운로드가 제한됩니다:

```python
def download_file(self, url: str, save_path: str, attachment_info: Dict[str, Any] = None) -> bool:
    """파일 다운로드 - IRIS는 보안상 제한됨"""
    if attachment_info and attachment_info.get('type') == 'javascript':
        logger.warning("IRIS 사이트는 보안 정책으로 인해 파일 다운로드가 제한됩니다")
        return False
    
    # 대안: 첨부파일 정보를 텍스트로 저장
    # 파일 메타데이터와 다운로드 파라미터를 보존
```

## 주요 해결책

### 1. 세션 관리 최적화
IRIS는 세션 초기화가 중요하여 전용 초기화 메서드를 구현했습니다:

```python
def _initialize_session(self):
    """세션 초기화"""
    if self._session_initialized:
        return True
        
    try:
        response = self.session.get(self.list_url, timeout=self.timeout)
        response.raise_for_status()
        self._session_initialized = True
        return True
    except Exception as e:
        logger.error(f"세션 초기화 실패: {e}")
        return False
```

### 2. 다중 필드명 지원
정부 사이트 특성상 다양한 필드명을 사용하여 유연한 추출 로직을 구현했습니다:

```python
# 제목 추출 (다양한 필드명 시도)
title_fields = ['title', 'ancmTitle', 'ancmNm', 'subjectNm', 'subject', 'name']
title = None
for field in title_fields:
    if field in item and item[field]:
        title = str(item[field]).strip()
        break

# 공고 ID 추출
id_fields = ['ancmId', 'ancmNo', 'id', 'seq', 'idx', 'no']
announcement_id = None
for field in id_fields:
    if field in item and item[field]:
        announcement_id = str(item[field])
        break
```

### 3. 메타데이터 보존
파일 다운로드가 제한되는 환경에서 메타데이터를 최대한 보존하는 전략을 구현했습니다:

```python
# 첨부파일 정보를 텍스트로 저장
attachments_info = []
for attachment in attachments:
    info = f"파일명: {attachment.get('name', 'unknown')}\n"
    info += f"다운로드 URL: {attachment.get('url', '')}\n"
    info += f"타입: {attachment.get('type', '')}\n"
    if attachment.get('params'):
        info += f"파라미터: {attachment.get('params')}\n"
    info += "---\n"
    attachments_info.append(info)
```

## 테스트 결과

### 성공률
- **공고 처리**: 100% (10개 공고 모두 처리 완료)
- **내용 추출**: 100% (모든 content.md 파일 생성)
- **첨부파일 메타데이터**: 100% (파일 정보 모두 추출)
- **실제 파일 다운로드**: 0% (보안 정책으로 제한)

### 파일 통계
- **처리된 공고 수**: 10개
- **생성된 content.md 파일**: 10개 (0.20 MB)
- **첨부파일 메타데이터**: 7개 파일 정보 (attachments_info.txt)

### 추출된 메타데이터
- 공고 ID, 제목, 날짜, 상태, 소관기관
- 첨부파일명, 파일 크기, Base64 인코딩된 다운로드 파라미터
- JavaScript 함수 호출 파라미터

## 재사용 가능한 패턴

### 1. Spring Framework + JSON API 하이브리드 처리
```python
# 다른 Spring 기반 사이트에 적용 가능한 패턴
def handle_spring_hybrid_response(self, response):
    try:
        return {'type': 'json', 'data': response.json()}
    except:
        return {'type': 'html', 'content': response.text}
```

### 2. 동적 JSON 구조 탐색
```python
# 정부 사이트의 다양한 JSON 구조에 대응
def find_list_in_json(self, json_data):
    for key, value in json_data.items():
        if isinstance(value, list) and len(value) > 0:
            return value
    return []
```

### 3. 보안 제한 환경 대응
```python
# 파일 다운로드가 제한된 환경에서의 메타데이터 보존 전략
def save_file_metadata(self, attachments, save_dir):
    metadata_file = os.path.join(save_dir, 'attachments_info.txt')
    with open(metadata_file, 'w', encoding='utf-8') as f:
        for attachment in attachments:
            f.write(f"파일명: {attachment['name']}\n")
            f.write(f"다운로드 파라미터: {attachment['params']}\n")
            f.write("---\n")
```

## 특별한 기술적 도전과 해결책

### 1. Base64 인코딩된 파라미터 처리
IRIS는 파일 다운로드 파라미터를 Base64로 인코딩하여 전달합니다:
- **도전**: `'GtjDGwbS/sZBOfjud1F3jQ=='` 같은 인코딩된 파라미터
- **해결책**: 파라미터를 그대로 보존하고 메타데이터로 저장

### 2. 복잡한 JavaScript 함수 파싱
```javascript
f_bsnsAncm_downloadAtchFile('GtjDGwbS/sZBOfjud1F3jQ==','ozjWd09j3U2GT4Z9Ez2lBg==','2025년도 민관합작 선진원자로 수출 기반 구축사업 신규과제 재공고문.hwp' ,'265216');
```
- **도전**: 4개의 파라미터를 가진 복잡한 함수 호출
- **해결책**: 정교한 정규표현식으로 모든 파라미터 추출

### 3. 정부 사이트 보안 정책
- **도전**: 자동화된 파일 다운로드 차단
- **해결책**: 메타데이터 중심의 정보 보존 전략

## 시사점

1. **정부 사이트 스크래핑**: 보안 정책을 고려한 유연한 접근 필요
2. **하이브리드 아키텍처**: JSON과 HTML 응답을 모두 처리할 수 있는 이중 파싱 시스템 효과적
3. **메타데이터 중심**: 실제 파일을 다운로드할 수 없는 환경에서도 유용한 정보 수집 가능
4. **동적 구조 대응**: 정부 사이트의 다양한 JSON 구조에 대응하는 유연한 파싱 로직 필요

IRIS 스크래퍼는 정부 사이트의 복잡한 아키텍처와 보안 제한을 효과적으로 처리하는 enhanced scraper 방식의 성공 사례입니다.