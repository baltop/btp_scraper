# KIAT (한국산업기술진흥원) Enhanced 스크래퍼 개발 인사이트

## 사이트 기본 정보
- **사이트명**: KIAT (Korea Institute for Advancement of Technology)
- **URL**: https://www.kiat.or.kr/front/board/boardContentsListPage.do?board_id=90&MenuId=b159c9dac684471b87256f1e25404f5e
- **인코딩**: UTF-8
- **SSL**: 지원

## 기술적 특징 분석

### 1. AJAX 기반 동적 로딩 시스템
KIAT 사이트는 전형적인 AJAX 기반 동적 사이트입니다:

```
메인 페이지: boardContentsListPage.do
AJAX API: boardContentsListAjax.do  
상세 페이지: boardContentsView.do (POST 요청)
```

**핵심 구현 포인트**:
- 목록 데이터는 AJAX API로 별도 요청
- 상세 페이지는 JavaScript 폼 전송 방식
- POST 요청으로 contents_id를 전달

### 2. JavaScript 폼 전송 패턴
```javascript
function contentsView(contentsid){ 
    var f = document.listFrm; 
    $("#contents_id").val(contentsid); 
    f.target = "_self"; 
    f.action = boardContentsViewUrl; // "/front/board/boardContentsView.do"
    f.submit(); 
}
```

**해결 방법**:
href 속성에서 contents_id 추출 후 POST 요청으로 변환:
```python
# href="javascript:contentsView('7a688123a8f046cb9990c0d6551ec1a7')"
match = re.search(r"contentsView\('([^']+)'\)", href)
if match:
    contents_id = match.group(1)
    detail_url = f"POST:{self.base_url}/front/board/boardContentsView.do:{contents_id}"
```

### 3. POST 요청 처리 구현
```python
def process_announcement(self, announcement, index: int, output_base: str = 'output'):
    url = announcement['url']
    if url.startswith('POST:'):
        parts = url.split(':')
        post_url = ':'.join(parts[1:3])
        contents_id = parts[3]
        
        post_data = {
            'contents_id': contents_id,
            'board_id': '90',
            'MenuId': 'b159c9dac684471b87256f1e25404f5e'
        }
        
        response = self.post_page(post_url, data=post_data)
```

## 첨부파일 처리 특징

### 1. 외부 다운로드 시스템
KIAT의 첨부파일은 k-pass.kr 도메인을 사용:
```
https://k-pass.kr/cmm/ifsFileDown.do?ATCH_FILE_ID=P001545373&SEQ=1&orignl_file_nm=파일명.hwp
```

### 2. 한글 파일명 지원
- 모든 첨부파일이 한글 파일명으로 제공
- Content-Disposition 헤더를 통한 정확한 파일명 전달
- UTF-8 인코딩으로 한글 파일명 완벽 지원

### 3. 다양한 파일 형식
테스트 결과 확인된 파일 형식:
- .hwp (한글 문서)
- .pdf (PDF 문서)  
- .zip (압축 파일)

## 성능 및 안정성

### 1. 테스트 결과
```
총 공고 수: 15개 (1페이지)
성공적 처리: 15개 (100.0%)
URL 포함 확인: 15개 (100.0%)
총 첨부파일: 11개
한글 파일명: 11개 (100%)
총 파일 용량: 14.1MB
첨부파일 보유 공고: 3개 (20.0%)
스크래핑 품질: 우수 ✅
```

### 2. 안정성 특징
- SSL 연결 안정적
- POST 요청 100% 성공
- 한글 파일명 처리 완벽
- 대용량 파일 (7.6MB ZIP) 정상 다운로드
- 네트워크 타임아웃 없음

## 재사용 가능한 패턴

### 1. AJAX + POST 조합 패턴
```python
class AjaxPostScraper(StandardTableScraper):
    def get_list_url(self, page_num: int) -> str:
        # AJAX API URL with parameters
        params = self.base_params.copy()
        params['miv_pageNo'] = str(page_num)
        param_str = '&'.join([f"{k}={v}" for k, v in params.items()])
        return f"{self.ajax_url}?{param_str}"
    
    def parse_list_page(self, html_content: str) -> List[Dict[str, Any]]:
        # href에서 JavaScript 함수 파라미터 추출
        if href and 'functionName' in href:
            match = re.search(r"functionName\('([^']+)'\)", href)
            if match:
                param_id = match.group(1)
                detail_url = f"POST:{self.base_url}/path/to/action.do:{param_id}"
```

### 2. POST 요청 통합 처리
Enhanced 스크래퍼의 `process_announcement` 메소드를 오버라이드하여 POST 요청을 투명하게 처리하는 패턴은 다른 사이트에서도 재사용 가능합니다.

### 3. 외부 다운로드 도메인 처리
KIAT처럼 첨부파일이 다른 도메인에서 제공되는 경우, Referer 헤더 설정이 중요:
```python
download_headers = self.headers.copy()
download_headers['Referer'] = self.base_url
```

## 적용 가능한 유사 사이트

이 패턴은 다음과 같은 사이트에 적용 가능:
1. **정부기관 최신 사이트**: JavaScript 기반 동적 로딩
2. **공공기관 게시판**: AJAX + POST 조합
3. **외부 파일 서버**: 별도 도메인의 첨부파일 시스템

## 개발 시 주의사항

### 1. JavaScript 함수 패턴 분석
각 사이트마다 JavaScript 함수명과 파라미터가 다르므로:
- 브라우저 개발자 도구로 Network 탭 확인
- 실제 POST 요청의 payload 분석
- 함수명과 파라미터 정확히 추출

### 2. POST 데이터 구성
KIAT의 경우 필수 파라미터:
- contents_id: 공고 고유 ID
- board_id: 게시판 ID (90)
- MenuId: 메뉴 ID (고정값)

### 3. 세션 관리
POST 요청이 많은 사이트는 세션 쿠키 관리가 중요:
```python
self.session = requests.Session()  # 세션 유지
```

## 성능 최적화 팁

### 1. 요청 간격 조절
```python
self.delay_between_requests = 1  # 1초 대기
self.delay_between_pages = 2     # 페이지 간 2초 대기
```

### 2. 대용량 파일 스트리밍
```python
response = self.session.get(url, stream=True)
for chunk in response.iter_content(chunk_size=8192):
    if chunk:
        f.write(chunk)
```

### 3. 타임아웃 설정
```python
self.timeout = 30  # 30초 타임아웃
response = self.session.get(url, timeout=self.timeout)
```

## 확장 가능성

### 1. 다중 게시판 지원
board_id를 변경하여 다른 게시판도 스크래핑 가능:
```python
boards = {
    'notices': '90',
    'events': '91', 
    'news': '92'
}
```

### 2. 검색 기능 추가
AJAX API에 검색 파라미터 추가 가능:
```python
params['search_keyword'] = keyword
params['search_type'] = 'title'
```

### 3. 페이지네이션 자동 감지
마지막 페이지 자동 감지로 효율성 향상 가능

## 결론

KIAT Enhanced 스크래퍼는 AJAX + POST 조합 사이트의 표준 구현체로 활용 가능합니다. 특히 JavaScript 기반 동적 사이트의 처리 방법과 한글 파일명 완벽 지원은 다른 정부/공공기관 사이트 개발 시 직접 재사용 가능한 패턴입니다.

**핵심 성공 요인**:
1. JavaScript 함수 정확한 분석
2. POST 요청 투명한 처리  
3. 외부 도메인 첨부파일 지원
4. 한글 파일명 완벽 처리
5. Enhanced 아키텍처 활용